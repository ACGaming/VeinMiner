/* This file is part of VeinMiner.
 *
 *    VeinMiner is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as
 *    published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *    VeinMiner is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with VeinMiner.
 *    If not, see <http://www.gnu.org/licenses/>.
 */

package portablejim.veinminer.asm;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.common.eventbus.EventBus;
import net.minecraftforge.fml.common.DummyModContainer;
import net.minecraftforge.fml.common.LoadController;
import net.minecraftforge.fml.common.Loader;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.versioning.ArtifactVersion;
import net.minecraftforge.fml.common.versioning.DefaultArtifactVersion;
import net.minecraftforge.fml.common.versioning.VersionRange;
import portablejim.veinminer.lib.ModInfo;

import java.security.cert.Certificate;
import java.util.List;
import java.util.Set;

/**
 * Container for the Veinminer Coremod.
 */

public class VeinMinerCoreContainer extends DummyModContainer {
    public VeinMinerCoreContainer() {
        super(new ModMetadata());
        ModMetadata meta = getMetadata();
        meta.modId = ModInfo.COREMOD_ID;
        meta.name = ModInfo.COREMOD_NAME;
        meta.parent = ModInfo.MODID;
        meta.requiredMods = getRequirements();
        meta.dependencies = getDependencies();
        meta.autogenerated = false;
    }

    @Override
    public String getModId() {
        return ModInfo.COREMOD_ID;
    }

    @Override
    public ArtifactVersion getProcessedVersion() {
        ArtifactVersion veinminerVersion = Loader.instance().getIndexedModList().get(ModInfo.MODID).getProcessedVersion();
        return new DefaultArtifactVersion(ModInfo.COREMOD_ID, veinminerVersion.getVersionString());
    }

    @Override
    public String getName() {
        return ModInfo.COREMOD_NAME;
    }

    @Override
    public String getVersion() {
        return Loader.instance().getIndexedModList().get(ModInfo.MODID).getVersion();
    }

    @Override
    public Set<ArtifactVersion> getRequirements() {
        ArtifactVersion forge = new DefaultArtifactVersion("Forge", true);
        ArtifactVersion veinMiner = new DefaultArtifactVersion(ModInfo.MODID, true);
        return Sets.newHashSet(forge, veinMiner);
    }

    @Override
    public List<ArtifactVersion> getDependencies() {
        ArtifactVersion forge = new DefaultArtifactVersion("Forge", true);
        return Lists.newArrayList(forge);
    }

    @Override
    public String getSortingRules() {
        return ModInfo.MODID;
    }

    @Override
    public boolean registerBus(EventBus bus, LoadController controller)
    {
        bus.register(this);
        return true;
    }

    @Override
    public String getDisplayVersion() {
        return Loader.instance().getIndexedModList().get(ModInfo.MODID).getDisplayVersion();
    }

    @Override
    public VersionRange acceptableMinecraftVersionRange() {
        return Loader.instance().getMinecraftModContainer().getStaticVersionRange();
    }

    @Override
    public Certificate getSigningCertificate() {
        try {
            Certificate[] certs = getClass().getProtectionDomain().getCodeSource().getCertificates();
            if(certs.length > 0) {
                return certs[0];
            }
        }
        catch (NullPointerException ignored) { }
        return null;
    }
}
